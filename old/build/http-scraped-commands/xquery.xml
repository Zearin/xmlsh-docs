
<?xml version="1.0" encoding="UTF-8"?>
<div xmlns="http://www.w3.org/1999/xhtml">
<!--Cannot find attribute for key "depreciated" from hints given.-->
<h1>Command xquery</h1>

   
   <h3>Name</h3>

   <strong>xquery</strong> evaluate an XQUERY expression and print the result<br/>
   
   <h3>Synopsis</h3>

xquery [ <a  href="/SerializationOptions">serialization options</a> ] [options]  [-v var value [var value]] <br/>
   
   <h3>Description</h3>

   <br/>
Evaluates an XQuery expression<br/>
   
   <h3>Options</h3>

   <table class="data">
      <tbody>
         <tr>
              <td>-f,-file xquery-file</td>
              <td>read xquery script from file</td>
            </tr>
         <tr>
              <td>-i,-input context</td>
              <td> use context as the source xml document, otherwise stdin if context is an XML expression which is an item then use it directly as the context item.</td>
            </tr>
         <tr>
              <td>-c,-context context</td>
              <td>Use context as a literal context</td>
            </tr>
         <tr>
              <td>-cf,-context-file file</td>
              <td>Use file as the name of an XML file for the context, or "-" for stdin</td>
            </tr>
         <tr>
              <td>-q query</td>
              <td>	use argument as xquery-expr</td>
            </tr>
         <tr>
              <td>-n</td>
              <td>	do not use a source context</td>
            </tr>
         <tr>
              <td>-v</td>
              <td>	if -v is given then the remaining args are treated as name/value pairs and assigned to xquery external variables</td>
            </tr>
         <tr>
              <td>-nons	</td>
              <td>Do not import global namespace declarations from the shell environment</td>
            </tr>
         <tr>
              <td>-ns prefix=uri</td>
              <td>	Add a predeclared namespace declaration</td>
            </tr>
         <tr>
              <td>-s,-string</td>
              <td>convert every node value in the result to a string</td>
            </tr>
         <tr>
              <td>-b,-bool</td>
              <td>Do not output result.  Exit with effective boolean value</td>
            </tr>
         <tr>
              <td>-baseuri uri</td>
              <td>Specify the base uri for the xquery</td>
            </tr>
      </tbody>
   </table>
   <br/>
xquery-expr		xquery expression<br/>
   <br/>
Supports the standard [ <a  href="/SerializationOptions">serialization options</a> ]<br/>
   <br/>
If no -q or -f is given then the next argument is treated as the xquery expression/script.<br/>
   <br/>
-i is depreciated.  It is a convenience option that does the following<br/>
   <ul>
          <li> If context is an atomic value then treat as a filename to be loaded as the context item
</li>
          <li> Otherwise treat as the literal context for the context item</li>
        </ul>
   <br/>
-c or -cf are suggested which explicitly indicate if to use the expression literally or as a filename<br/>
   <br/>
if -b is supplied then no output, instead the return value is 0 if the effective boolean value of the result is true otherwise 1.<br/>
   <br/>
if -baseuri is supplied then the arguement is used as a relative or absolute uri.  If relative it is relative to the current directory.<br/>
If no -baseuri is supplied, then if -f is supplied the absolute path of the script is used as the base uri, otherwise the current directory<br/>
is used as the base uri.   The base URI is used for all URI resolution in the xquery, including modules and documents.<br/>
   <br/>
Not all options are compatible.  You cannot read both the query and the context from stdin.<br/>
If you supply variables then -q must be supplied.<br/>
   <br/>
If the result (or any node of the result if a sequence) is an Attribute, or if the -s option is specified the it is converted to a string.<br/>
   
   <h3>Example</h3>

   <div class="code">
      <pre>xls | xquery '//file[1]/@name/string()'</pre>
   </div>

Result<br/>
   <div class="code">
      <pre>.classpath</pre>
   </div>


Simplified example, you dont need string()<br/>
   <div class="code">
      <pre>xls | xquery '//file[1]/@name'</pre>
   </div>

Result<br/>
   <div class="code">
      <pre>.classpath</pre>
   </div>

Example<br/>
   <div class="code">
      <pre>xquery -i &lt;[&lt;foo/&gt;] .</pre>
   </div>

Result<br/>
   <div class="code">
      <pre>&lt;foo/&gt;</pre>
   </div>


Namespace example using a renamed prefix for a namespace<br/>
   <div class="code">
      <pre>echo "&lt;x:a xmlns:x='foo' /&gt;" | xquery  -nons -ns y=foo /y:a</pre>
   </div>

Result<br/>
   <div class="code">
      <pre>&lt;x:a xmlns:x="foo"/&gt;</pre>
   </div>

When using large XQuery expressions consider storing the xquery in a file such as <br/>
   <div class="code">
      <pre>xquery -f query.xquery</pre>
   </div>

Or using the Block Quotes which makes managing the various quote options in XPath and XQuery easier<br/>
   <div class="code">
      <pre>xquery -n -q &lt;{{
declare variable $A external ;
declare function local:foo( $a ) 
{
   &lt;node&gt;{ concat("foo",$a,'bar') }&lt;/node&gt;
};

local:foo( $A/spam[2] )
}}&gt;  -v A &lt;[ &lt;elem&gt;&lt;spam&gt;text&lt;/spam&gt;&lt;spam&gt;text2&lt;/spam&gt;&lt;/elem&gt; ]&gt;</pre>
   </div>

Result<br/>
   <div class="code">
      <pre>&lt;node&gt;footext2bar&lt;/node&gt;</pre>
   </div>


   
   <h3>Return Value</h3>

Returns 0 if the the xquery expression executed successfully. otherwise 1<br/>
   <br/>


 
   <br/>


</div>
