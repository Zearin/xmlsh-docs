<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href=           "http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" 
            schematypens=   "http://relaxng.org/ns/structure/1.0"?>
<?xml-model href=           "http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" 
            type=           "application/xml" 
            schematypens=   "http://purl.oclc.org/dsdl/schematron"?>
<reference
    xmlns=      "http://docbook.org/ns/docbook" 
    xmlns:xi=   "http://www.w3.org/2001/XInclude"
    xmlns:xl=   "http://www.w3.org/1999/xlink" 
    version=    "5.0"
>
    
    <info>
        <title>XMLSH Commands</title>
        <subtitle>Posix Module</subtitle>
        <!--<author>
            <orgname></orgname>
            <email></email>
        </author>-->
    </info>
    
    <!--<partintro>-->
        <!--    
            http://www.xmlsh.org/CommandsPosix
        -->
        <!--    
        The following commands are built into xmlsh, but need to be imported. They are not imported by default because they provide a simpler (less feature-full) implementation of common posix commands which are likely to exist in the environment. On Linux, Unix and Mac/OS these will already exist in /bin or /usr/bin. On Windows they will exist if you have cygwin or other unix compatibility software installed.
        
        Importing
        
        To use the Posix commands, you need to import them into either the global namespace or a local namespace.
        It’s recommended that you use a local namespace so that you still have access to the system commands of the same name.
        
        To import into the p namespace prefix:
        import commands p=posix
        
        
        To import into the global namespace:
        import commands posix
        
        
        
        Advantages / Disadvantages
        
        You may want to use these commands even if they exist in the environment for the following reasons:
        
            They are very fast.
                These commands are run in the shell's JVM and do not require starting a subprocess.
            No dependancy on environment
                You can use these commands to write scripts that do not depend on them existing in the environment. The test cases use these commands so they can run on Windows without presuming you have cygwin installed.
            Consistant with xmlsh internal environment model
                Since these commands are implemented using the internal API they will produce results more consistant with the internal model. For example the cygwin "pwd" command can give different results then the xmlsh posix "pwd" command due to cygwin's differing model of the filesystem.
        
        You may want to avoid these commands for the following reasons:
        
            They are less feature-full then the coresponsing OS commands.
            They are not as mature, these commands are a simple implementation using core Java methods and may not be as roboust as the OS commands.
            There are some things these commands cannot do which the native OS commands can, due to being based (limited by) Java APIs. For example, the chmod command cannot set group permissions or setuid modes.
            The options are not as rich as the equivalent OS commands and may not be identical.
        
        It’s recommended that you import the POSIX commands using a prefix (rather than into the global namespace); otherwise, you will be unable to access the OS commands of the same name without using their full path.
    -->
    <!--</partintro>-->
    
        
    <xi:include href="base64.xml"   />
    <xi:include href="cat.xml"      />
    <xi:include href="chmod.xml"    />
    <xi:include href="cp.xml"       />
    <xi:include href="ls.xml"       />
    <xi:include href="mkdir.xml"    />
    <xi:include href="mktemp.xml"   />
    <xi:include href="more.xml"     />
    <xi:include href="mv.xml"       />
    <xi:include href="pwd.xml"      />
    <xi:include href="rm.xml"       />
    <xi:include href="rmdir.xml"    />
    <xi:include href="sleep.xml"    />
    <xi:include href="tee.xml"      />
    <xi:include href="touch.xml"    />
    <xi:include href="wc.xml"       />
    
    
</reference>
